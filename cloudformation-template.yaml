AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudOps Agent Lambda Function - Minimal Configuration'

Parameters:
  FunctionName:
    Type: String
    Default: 'aws-cloudops-agent'
    Description: 'Name for the Lambda function'
  
  Timeout:
    Type: Number
    Default: 300
    MinValue: 3
    MaxValue: 900
    Description: 'Function timeout in seconds (max 15 minutes)'
  
  MemorySize:
    Type: Number
    Default: 512
    MinValue: 128
    MaxValue: 10240
    Description: 'Memory allocation for the function in MB'

Resources:
  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${FunctionName}-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'AWSCloudOpsAgentPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Bedrock permissions for Claude
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                Resource: 
                  - !Sub 'arn:aws:bedrock:*:${AWS::AccountId}:foundation-model/anthropic.claude*'
                  - !Sub 'arn:aws:bedrock:*:${AWS::AccountId}:foundation-model/apac.anthropic.claude*'
              
              # Basic AWS read permissions (expand as needed)
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeImages'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeSubnets'
                  - 's3:ListBuckets'
                  - 's3:GetBucketLocation'
                  - 'iam:ListRoles'
                  - 'iam:ListUsers'
                  - 'lambda:ListFunctions'
                  - 'rds:DescribeDBInstances'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:ListStacks'
                Resource: '*'

  # Lambda Function
  CloudOpsAgentFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: 'python3.11'
      Handler: 'lambda_handler.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: !Ref Timeout
      MemorySize: !Ref MemorySize
      Environment:
        Variables:
          PYTHONPATH: '/var/task/src'
      Code:
        ZipFile: |
          # Placeholder code - replace with actual deployment package
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Please upload the actual deployment package'
              }

  # API Gateway (Optional - for HTTP access)
  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${FunctionName}-api'
      Description: 'API Gateway for AWS CloudOps Agent'
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'chat'

  ApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CloudOpsAgentFunction.Arn}/invocations'

  ApiGatewayOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ApiGatewayMethod
      - ApiGatewayOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: 'prod'

  LambdaApiGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref CloudOpsAgentFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/chat'

Outputs:
  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref CloudOpsAgentFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt CloudOpsAgentFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  ApiGatewayUrl:
    Description: 'API Gateway URL for the CloudOps Agent'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/chat'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ExecutionRoleArn:
    Description: 'ARN of the Lambda execution role'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ExecutionRoleArn'