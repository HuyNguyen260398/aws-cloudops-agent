AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudOps Agent Lambda Function with API Gateway'

Parameters:
  FunctionName:
    Type: String
    Default: 'aws-cloudops-agent'
    Description: 'Name for the Lambda function'
  
  LambdaRuntime:
    Type: String
    Default: 'python3.11'
    Description: 'Python runtime for Lambda'
  
  MemorySize:
    Type: Number
    Default: 1024
    MinValue: 128
    MaxValue: 10240
    Description: 'Memory allocation for Lambda function (MB)'
  
  Timeout:
    Type: Number
    Default: 300
    MinValue: 1
    MaxValue: 900
    Description: 'Timeout for Lambda function (seconds)'

Resources:
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${FunctionName}-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AWSCloudOpsAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Bedrock permissions
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/apac.anthropic.claude-sonnet-4*'
              
              # AWS CloudOps permissions
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - s3:List*
                  - s3:Get*
                  - rds:Describe*
                  - lambda:List*
                  - lambda:Get*
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - iam:List*
                  - iam:Get*
                  - cloudwatch:Describe*
                  - cloudwatch:Get*
                  - cloudwatch:List*
                  - logs:Describe*
                  - logs:Get*
                  - route53:List*
                  - route53:Get*
                  - elasticloadbalancing:Describe*
                  - autoscaling:Describe*
                  - ecs:Describe*
                  - ecs:List*
                  - eks:Describe*
                  - eks:List*
                  - dynamodb:Describe*
                  - dynamodb:List*
                  - sns:List*
                  - sns:Get*
                  - sqs:List*
                  - sqs:Get*
                Resource: '*'
              
              # DynamoDB permissions for RAG system
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/aws-cloudops-knowledge'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/aws-cloudops-knowledge/*'

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: !Ref LambdaRuntime
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Placeholder - will be replaced during deployment'
              }
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Environment:
        Variables:
          PYTHONPATH: '/var/task/src'
      Description: 'AWS CloudOps Agent - AI-powered AWS operations assistant'

  # Lambda Function for Health Check
  HealthCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${FunctionName}-health'
      Runtime: !Ref LambdaRuntime
      Handler: lambda_handler.health_check_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def health_check_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': '{"status": "healthy"}'
              }
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          PYTHONPATH: '/var/task/src'
      Description: 'Health check for AWS CloudOps Agent'

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${FunctionName}-api'
      Description: 'API Gateway for AWS CloudOps Agent'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for chat
  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'chat'

  # API Gateway Resource for health
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'health'

  # API Gateway Method for chat (POST)
  ChatMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ChatResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  # API Gateway Method for health (GET)
  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthCheckFunction.Arn}/invocations'

  # CORS for chat endpoint
  ChatOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ChatResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ChatMethod
      - HealthMethod
      - ChatOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: 'prod'

  # Lambda permissions for API Gateway
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  HealthLambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HealthCheckFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

Outputs:
  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ChatEndpoint:
    Description: 'Chat endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/chat'
    Export:
      Name: !Sub '${AWS::StackName}-ChatEndpoint'

  HealthEndpoint:
    Description: 'Health check endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/health'
    Export:
      Name: !Sub '${AWS::StackName}-HealthEndpoint'